cmake_minimum_required(VERSION 3.8)
project(auto_apms_core)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

set(ignoreMe "${CMAKE_EXPORT_COMPILE_COMMANDS}") # Suppress the unused warning which occurs since the library is INTERFACE only

find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(action_msgs REQUIRED)

option(AUTO_APMS_CORE_DEBUG_LOGGING "Enable debug logging severity" ON)

#
# ------------ Library --------------
#

add_library(auto_apms_core_lib INTERFACE)
target_include_directories(auto_apms_core_lib INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
ament_target_dependencies(auto_apms_core_lib INTERFACE
    rclcpp
    rclcpp_action
    action_msgs
)

# Install the version header to the autogenerated headers dir also used by rosidl generators
ament_generate_version_header(auto_apms_core_lib HEADER_PATH "${PROJECT_NAME}/version.hpp")

#
# ------------ Testing --------------
#

if(BUILD_TESTING)
    # Test interfaces
    find_package(rosidl_default_generators REQUIRED)

    # Note that for some reason we MUST use the tuple notation, because otherwise include errors will occur with the generated files
    rosidl_generate_interfaces(${PROJECT_NAME} "${CMAKE_CURRENT_SOURCE_DIR}/test/interfaces:action/Test.action")
    rosidl_get_typesupport_target(_test_interfaces_target ${PROJECT_NAME} rosidl_typesupport_cpp)

    # Unit tests
    find_package(ament_cmake_gtest REQUIRED)

    ament_add_gtest(${PROJECT_NAME}_unit_tests
        test/unit/main.cpp
    )
    target_link_libraries(${PROJECT_NAME}_unit_tests
        auto_apms_core_lib
        "${_test_interfaces_target}"
    )
endif()

#
# ------------ Packaging --------------
#

if(AUTO_APMS_CORE_DEBUG_LOGGING)
    target_compile_definitions(auto_apms_core_lib INTERFACE _AUTO_APMS_CORE_DEBUG_LOGGING)
endif()

install(
    TARGETS
    auto_apms_core_lib
    EXPORT export_${PROJECT_NAME}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin)

install(
    DIRECTORY include/${PROJECT_NAME}
    DESTINATION include)

ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)
ament_export_dependencies(
    rclcpp
    rclcpp_action
    action_msgs
)

ament_package()
