<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4"
      main_tree_to_execute="ContingencyManager">
  <BehaviorTree ID="BatteryCriticalHandler">
    <Sequence>
      <GetGlobalPosition altitude="{before_alt}"
                         pos_vec="{before_pos_vec}"
                         topic_name="__default__placeholder__"/>
      <GoTo name="Recharge"
            lat="49.86073630890625"
            lon="8.676407728678667"
            alt="190"
            action_name="__default__placeholder__"/>
      <Land name="Recharge"
            action_name="__default__placeholder__"/>
      <EnableHold action_name="__default__placeholder__"/>
      <Disarm action_name="__default__placeholder__"/>
      <SubTree ID="WaitForEventClear"
               event_id="EVENT_BATTERY_CRITICAL"/>
      <Arm wait_until_ready_to_arm="true"
           action_name="__default__placeholder__"/>
      <SubTree ID="ReturnToPosition"
               before_pos_vec="{before_pos_vec}"
               before_alt="{before_alt}"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="ContingencyManager">
    <Sequence name="HandleContingency">
      <HaltExecutor action_name="__default__placeholder__"/>
      <ReactiveSequence>
        <AsyncPrecondition check_while_running="false"
                           else="SUCCESS"
                           if="@event_id == EVENT_BATTERY_CRITICAL">
          <SubTree ID="BatteryCriticalHandler"
                   _autoremap="false"/>
        </AsyncPrecondition>
        <AsyncPrecondition check_while_running="false"
                           else="SUCCESS"
                           if="@event_id == EVENT_LANDING_PERM_BLOCKED">
          <SubTree ID="LandingPermBlockedHandler"
                   _autoremap="false"/>
        </AsyncPrecondition>
        <AsyncPrecondition check_while_running="false"
                           else="SUCCESS"
                           if="@event_id == EVENT_LANDING_TEMP_BLOCKED">
          <SubTree ID="LandingTempBlockedHandler"/>
        </AsyncPrecondition>
      </ReactiveSequence>
      <ResumeExecutor action_name="__default__placeholder__"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="LandingPermBlockedHandler">
    <Sequence>
      <GetGlobalPosition altitude="{altitude}"
                         pos_vec="{pos_vec}"
                         topic_name="__default__placeholder__"/>
      <CreateAlternateLandingMission tree_id="{new_mission_tree_id}"
                                     xml_data="{alternate_landing_tree}"
                                     pos_vec="{pos_vec}"/>
      <UploadBehaviorTree name="UploadAlternateLandingMission"
                          xml_data="{alternate_landing_tree}"
                          tree_id="{new_mission_tree_id}"
                          service_name="__default__placeholder__"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="LandingTempBlockedHandler">
    <Sequence>
      <EnableHold action_name="__default__placeholder__"/>
      <SubTree ID="WaitForEventClear"
               event_id="EVENT_LANDING_TEMP_BLOCKED"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="ReturnToPosition">
    <Sequence>
      <GetGlobalPosition altitude="{altitude}"
                         pos_vec="{pos_vec}"
                         topic_name="__default__placeholder__"/>
      <Takeoff name="ClimbBackToMissionAltitude"
               alt="{before_alt}"
               action_name="__default__placeholder__"
               _skipIf="(before_alt - altitude) &lt; 1"/>
      <GoToVector vector="{before_pos_vec}"
                  action_name="__default__placeholder__"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="WaitForEventClear">
    <RetryUntilSuccessful num_attempts="-1">
      <ScriptCondition name="CheckIfEventClear"
                       code="@event_id != event_id"/>
    </RetryUntilSuccessful>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="Arm">
      <input_port name="wait_until_ready_to_arm"
                  default="true"
                  type="bool">Wait for the UAV to be ready for arming. If false and UAV is not ready to arm, will be rejected.</input_port>
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Decorator ID="AsyncPrecondition">
      <input_port name="check_while_running"
                  default="false"
                  type="bool">Check the condition in argument 'if' also while the child is RUNNING</input_port>
      <input_port name="else"
                  default="SKIPPED"
                  type="BT::NodeStatus">Return status if condition is false</input_port>
      <input_port name="if"
                  type="std::string">If true, return RUNNING. Otherwise, return what's specified in argument 'else'</input_port>
    </Decorator>
    <Action ID="CreateAlternateLandingMission">
      <output_port name="tree_id"
                   default="{tree_id}"
                   type="std::string">The ID of the tree that acts as the entry point for the mission</output_port>
      <output_port name="xml_data"
                   default="{xml_data}"
                   type="std::string">String containing the XML data of the alternate landing mission tree</output_port>
      <input_port name="pos_vec"
                  type="Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;">Current global position (latitude [째], longitude [째], altitude AMSL [m])</input_port>
    </Action>
    <Action ID="Disarm">
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="EnableHold">
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Condition ID="GetGlobalPosition">
      <output_port name="altitude"
                   default="{altitude}"
                   type="double">Current altitude in meter (AMSL)</output_port>
      <output_port name="pos_vec"
                   default="{pos_vec}"
                   type="Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;">Current global position (latitude [째], longitude [째], altitude AMSL [m])</output_port>
      <input_port name="topic_name"
                  default="__default__placeholder__"
                  type="std::string">Topic name</input_port>
    </Condition>
    <Action ID="GoTo">
      <input_port name="lat"
                  type="double">Target latitude</input_port>
      <input_port name="lon"
                  type="double">Target longitude</input_port>
      <input_port name="alt"
                  type="double">Target altitude in meter (AMSL)</input_port>
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="GoToVector">
      <input_port name="vector"
                  type="Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;">Target position as a pointer to a vector</input_port>
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="HaltExecutor">
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="Land">
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="ResumeExecutor">
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="Takeoff">
      <input_port name="alt"
                  type="double">Target takeoff altitude in meter (AMSL)</input_port>
      <input_port name="action_name"
                  default="__default__placeholder__"
                  type="std::string">Action server name</input_port>
    </Action>
    <Action ID="UploadBehaviorTree">
      <input_port name="xml_data"
                  type="std::string">XML string containing the data for the behavior trees to be registered</input_port>
      <input_port name="tree_id"
                  type="std::string">ID of the tree that should be created. Empty means to use the main_tree_to_execute attribute to determine which tree is to be executed</input_port>
      <input_port name="service_name"
                  default="__default__placeholder__"
                  type="std::string">Service name</input_port>
    </Action>
  </TreeNodesModel>

</root>
