<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4"
      main_tree_to_execute="RelativeGoTo">
  <BehaviorTree ID="RelativeGoTo">
    <Fallback>
      <Sequence>
        <Sequence name="GetParameters">
          <Fallback>
            <HasParameter parameter="bb.x"
                          node=""/>
            <Script code="@x := 0.0"/>
          </Fallback>
          <Fallback>
            <HasParameter parameter="bb.y"
                          node=""/>
            <Script code="@y := 0.0"/>
          </Fallback>
          <Fallback>
            <HasParameter parameter="bb.z"
                          node=""/>
            <Script code="@z := 0.0"/>
          </Fallback>
        </Sequence>
        <RetryUntilSuccessful num_attempts="-1"
                              _onSuccess="x := north + @x; y := east + @y; z := down + @z">
          <GetLocalPosition down="{down}"
                            east="{east}"
                            north="{north}"
                            vector="{pos_vec}"/>
        </RetryUntilSuccessful>
        <GoTo reached_thresh_yaw="7.000000"
              reached_thresh_vel="0.300000"
              reached_thresh_pos="0.500000"
              max_heading_rate="30.000000"
              max_vertical_vel="5.000000"
              max_horizontal_vel="10.000000"
              z="{z}"
              y="{y}"
              x="{x}"
              vector="{pos_vec}"
              frame="local"/>
      </Sequence>
      <Error message="relative_goto failed"/>
    </Fallback>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="Error">
      <input_port name="message"
                  type="std::string">Error message. Creates a generic error message if empty.</input_port>
    </Action>
    <Condition ID="GetLocalPosition">
      <output_port name="down"
                   default="{down}"
                   type="double">Current down [m] relative to origin</output_port>
      <output_port name="east"
                   default="{east}"
                   type="double">Current east [m] relative to origin</output_port>
      <output_port name="north"
                   default="{north}"
                   type="double">Current north [m] relative to origin</output_port>
      <output_port name="vector"
                   default="{pos_vec}"
                   type="Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;">Current local position vector (north [m], east [m], down [m])</output_port>
    </Condition>
    <Action ID="GoTo">
      <input_port name="reached_thresh_yaw"
                  default="7.000000"
                  type="double">Maximum heading error [°] under which the position is considered reached</input_port>
      <input_port name="reached_thresh_vel"
                  default="0.300000"
                  type="double">Maximum velocity error [m/s] under which the position is considered reached</input_port>
      <input_port name="reached_thresh_pos"
                  default="0.500000"
                  type="double">Maximum position error [m] under which the position is considered reached</input_port>
      <input_port name="max_heading_rate"
                  default="30.000000"
                  type="double">Maximum heading rate [°/s]</input_port>
      <input_port name="max_vertical_vel"
                  default="5.000000"
                  type="double">Maximum vertical velocity [m/s]</input_port>
      <input_port name="max_horizontal_vel"
                  default="10.000000"
                  type="double">Maximum horizontal velocity [m/s]</input_port>
      <input_port name="yaw"
                  type="double">Desired yaw position in degree from north (heading) [-180°, 180)</input_port>
      <input_port name="z"
                  type="double">Override vector entry Z</input_port>
      <input_port name="y"
                  type="double">Override vector entry Y</input_port>
      <input_port name="x"
                  type="double">Override vector entry X</input_port>
      <input_port name="vector"
                  type="Eigen::Matrix&lt;double, -1, -1, 0, -1, -1&gt;">Target position as a row vector (separated by ';')</input_port>
      <input_port name="frame"
                  default="global"
                  type="std::string">Reference frame: 'global' (Latitude, longitude, altitude (AMSL)) or 'local' (North, east, down from start)</input_port>
    </Action>
    <Action ID="HasParameter">
      <input_port name="parameter"
                  type="std::string">Name of the parameter.</input_port>
      <input_port name="node"
                  type="std::string">Name of the targeted ROS 2 node. Leave empty to target this executor's node.</input_port>
    </Action>
  </TreeNodesModel>

</root>
