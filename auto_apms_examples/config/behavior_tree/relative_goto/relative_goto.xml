<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4"
      main_tree_to_execute="RelativeGoTo">
  <BehaviorTree ID="RelativeGoTo">
    <Fallback>
      <SequenceWithMemory>
        <ReadGlobalPosition pos_vec="{pos_vec}"
                            alt="{alt}"
                            lat="{lat}"
                            lon="{lon}"
                            port=""
                            _onSuccess="new_alt := alt + 10;&#10;new_lon := lon + 0.0001"/>
        <Arm wait_until_ready_to_arm="true"
             port=""/>
        <Takeoff alt="{new_alt}"
                 port=""/>
        <GoTo lat="{lat}"
              lon="{new_lon}"
              alt="{new_alt}"
              port=""/>
        <Land port=""/>
        <Disarm port=""/>
      </SequenceWithMemory>
      <Error message="relative_goto failed"/>
    </Fallback>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="Arm">
      <input_port name="wait_until_ready_to_arm"
                  default="true"
                  type="bool">Wait for the UAV to be ready for arming. If false and UAV is not ready to arm, will be rejected.</input_port>
      <input_port name="port"
                  type="std::string">Name of the ROS 2 action.</input_port>
    </Action>
    <Action ID="Disarm">
      <input_port name="port"
                  type="std::string">Name of the ROS 2 action.</input_port>
    </Action>
    <Action ID="Error">
      <input_port name="message"
                  type="std::string">Error message. Creates a generic error message if empty.</input_port>
    </Action>
    <Action ID="GoTo">
      <input_port name="lat"
                  type="double">Target latitude</input_port>
      <input_port name="lon"
                  type="double">Target longitude</input_port>
      <input_port name="alt"
                  type="double">Target altitude in meter (AMSL)</input_port>
      <input_port name="port"
                  type="std::string">Name of the ROS 2 action.</input_port>
    </Action>
    <Action ID="Land">
      <input_port name="port"
                  type="std::string">Name of the ROS 2 action.</input_port>
    </Action>
    <Condition ID="ReadGlobalPosition">
      <output_port name="pos_vec"
                   default="{pos_vec}"
                   type="Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;">Current global position vector (latitude [째], longitude [째], altitude AMSL [m])</output_port>
      <output_port name="alt"
                   default="{alt}"
                   type="double">Current altitude in meter (AMSL)</output_port>
      <output_port name="lat"
                   default="{lat}"
                   type="double">Current latitude in degree [째]</output_port>
      <output_port name="lon"
                   default="{lon}"
                   type="double">Current longitude in degree [째]</output_port>
      <input_port name="port"
                  type="std::string">Name of the ROS 2 topic to subscribe to.</input_port>
    </Condition>
    <Action ID="Takeoff">
      <input_port name="alt"
                  type="double">Target takeoff altitude in meter (AMSL)</input_port>
      <input_port name="port"
                  type="std::string">Name of the ROS 2 action.</input_port>
    </Action>
  </TreeNodesModel>

</root>
