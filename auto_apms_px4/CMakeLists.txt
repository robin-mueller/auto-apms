cmake_minimum_required(VERSION 3.12)
project(auto_apms_px4)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)
find_package(rclcpp_components REQUIRED)
find_package(px4_msgs REQUIRED)
find_package(px4_ros2_cpp REQUIRED)
find_package(eigen3_cmake_module REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(tf2_eigen REQUIRED)
find_package(auto_apms_util REQUIRED)
find_package(auto_apms_behavior_tree_core REQUIRED)
find_package(auto_apms_interfaces REQUIRED)

option(AUTO_APMS_PX4_DEBUG_LOGGING "Enable debug logging severity" ON)
if(AUTO_APMS_PX4_DEBUG_LOGGING)
    add_compile_definitions(_AUTO_APMS_DEBUG_LOGGING)
endif()

set(_AUTO_APMS_PX4__ARM_DISARM_ACTION_NAME "arm_disarm")
set(_AUTO_APMS_PX4__ENABLE_HOLD_ACTION_NAME "enable_hold")
set(_AUTO_APMS_PX4__GOTO_ACTION_NAME "go_to")
set(_AUTO_APMS_PX4__LAND_ACTION_NAME "land")
set(_AUTO_APMS_PX4__RTL_ACTION_NAME "rtl")
set(_AUTO_APMS_PX4__TAKEOFF_ACTION_NAME "takeoff")
set(_AUTO_APMS_PX4__MISSION_ACTION_NAME "mission")

#
# ------------ Library --------------
#

add_library(auto_apms_px4 SHARED
    "src/vehicle_command_client.cpp"
)
target_include_directories(auto_apms_px4 PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
ament_target_dependencies(auto_apms_px4
    px4_msgs
    px4_ros2_cpp
    Eigen3
    auto_apms_interfaces
    auto_apms_util
)

# Install the version header to the autogenerated headers dir also used by rosidl generators
ament_generate_version_header(auto_apms_px4 HEADER_PATH "${PROJECT_NAME}/version.hpp")

#
# ------------ Tasks --------------
#

add_library(px4_tasks SHARED
    "src/task/arm_disarm.cpp"
    "src/task/enable_hold.cpp"
    "src/task/goto.cpp"
    "src/task/land.cpp"
    "src/task/takeoff.cpp"
    "src/task/rtl.cpp"
    "src/task/mission.cpp"
)
target_link_libraries(px4_tasks
    auto_apms_px4
)
target_compile_definitions(px4_tasks PRIVATE
    _AUTO_APMS_PX4__ARM_DISARM_ACTION_NAME="${_AUTO_APMS_PX4__ARM_DISARM_ACTION_NAME}"
    _AUTO_APMS_PX4__ENABLE_HOLD_ACTION_NAME="${_AUTO_APMS_PX4__ENABLE_HOLD_ACTION_NAME}"
    _AUTO_APMS_PX4__GOTO_ACTION_NAME="${_AUTO_APMS_PX4__GOTO_ACTION_NAME}"
    _AUTO_APMS_PX4__LAND_ACTION_NAME="${_AUTO_APMS_PX4__LAND_ACTION_NAME}"
    _AUTO_APMS_PX4__RTL_ACTION_NAME="${_AUTO_APMS_PX4__RTL_ACTION_NAME}"
    _AUTO_APMS_PX4__TAKEOFF_ACTION_NAME="${_AUTO_APMS_PX4__TAKEOFF_ACTION_NAME}"
    _AUTO_APMS_PX4__MISSION_ACTION_NAME="${_AUTO_APMS_PX4__MISSION_ACTION_NAME}"
)
ament_target_dependencies(px4_tasks
    rclcpp_components
    tf2_eigen
    auto_apms_util
)

rclcpp_components_register_nodes(px4_tasks
    "auto_apms_px4::ArmDisarmTask"
    "auto_apms_px4::EnableHoldTask"
    "auto_apms_px4::GoToTask"
    "auto_apms_px4::LandTask"
    "auto_apms_px4::TakeoffTask"
    "auto_apms_px4::RTLTask"
    "auto_apms_px4::MissionTask"
)

#
# ------------ Behavior Tree Nodes --------------
#

add_library(px4_behavior_tree_nodes SHARED
    "src/node/action/arm.cpp"
    "src/node/action/disarm.cpp"
    "src/node/action/enable_hold.cpp"
    "src/node/action/goto_vec.cpp"
    "src/node/action/goto.cpp"
    "src/node/action/land.cpp"
    "src/node/action/mission.cpp"
    "src/node/action/rtl.cpp"
    "src/node/action/takeoff.cpp"
    "src/node/sub/glob_pos.cpp"
)
ament_target_dependencies(px4_behavior_tree_nodes
    px4_msgs
    auto_apms_interfaces
    auto_apms_behavior_tree_core
)
auto_apms_behavior_tree_declare_nodes(px4_behavior_tree_nodes
    "auto_apms_px4::ArmAction"
    "auto_apms_px4::DisarmAction"
    "auto_apms_px4::EnableHoldAction"
    "auto_apms_px4::GoToVectorAction"
    "auto_apms_px4::GoToAction"
    "auto_apms_px4::LandAction"
    "auto_apms_px4::MissionAction"
    "auto_apms_px4::RTLAction"
    "auto_apms_px4::TakeoffAction"
    "auto_apms_px4::ReadGlobalPosition"
    NODE_MANIFEST
    "config/px4_behavior_tree_nodes.yaml.in"
)

#
# ------------ Packaging --------------
#

###### Export libraries ######
install(
    TARGETS
    auto_apms_px4
    EXPORT export_${PROJECT_NAME}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)
ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)
ament_export_dependencies(
    px4_msgs
    px4_ros2_cpp
    Eigen3
    auto_apms_interfaces
    auto_apms_util
)

##### Plugin libraries ######
install(
    TARGETS
    px4_tasks
    px4_behavior_tree_nodes
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(
    DIRECTORY include/${PROJECT_NAME}
    DESTINATION include
)

install(
    DIRECTORY launch
    DESTINATION share/${PROJECT_NAME}
)

ament_package()
