cmake_minimum_required(VERSION 3.8)
project(auto_apms_px4)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)

find_package(auto_apms_core REQUIRED)
find_package(auto_apms_behavior_tree REQUIRED)
find_package(auto_apms_interfaces REQUIRED)
find_package(px4_msgs REQUIRED)
find_package(px4_ros2_cpp REQUIRED)
find_package(eigen3_cmake_module REQUIRED)
find_package(Eigen3 REQUIRED)

find_package(rclcpp_components REQUIRED)
find_package(tf2_eigen REQUIRED)

option(AUTO_APMS_PX4_DEBUG_LOGGING "Enable debug logging severity" ON)

#
# ------------ Library --------------
#

add_library(auto_apms_px4 SHARED
    "src/vehicle_command_client.cpp"
)
target_include_directories(auto_apms_px4 PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
ament_target_dependencies(auto_apms_px4
    auto_apms_interfaces
    px4_msgs
    px4_ros2_cpp
    Eigen3

    # Dependencies currently only needed for px4 topic sub node QoS workaround in bt_px4_topic_sub_node.hpp
    behaviortree_cpp
    behaviortree_ros2
)

# Install the version header to the autogenerated headers dir also used by rosidl generators
ament_generate_version_header(auto_apms_px4 HEADER_PATH "${PROJECT_NAME}/version.hpp")

#
# ------------ Tasks --------------
#

add_library(tasks SHARED
    "src/task/arm_disarm.cpp"
    "src/task/enable_hold.cpp"
    "src/task/goto.cpp"
    "src/task/land.cpp"
    "src/task/takeoff.cpp"
    "src/task/rtl.cpp"
    "src/task/mission.cpp"
)
target_link_libraries(tasks auto_apms_px4)
ament_target_dependencies(tasks
    auto_apms_core
    rclcpp_components
    tf2_eigen
)

rclcpp_components_register_nodes(tasks
    "auto_apms_px4::ArmDisarmTask"
    "auto_apms_px4::EnableHoldTask"
    "auto_apms_px4::GoToTask"
    "auto_apms_px4::LandTask"
    "auto_apms_px4::TakeoffTask"
    "auto_apms_px4::RTLTask"
    "auto_apms_px4::MissionTask"
)

#
# ------------ Behavior Tree Nodes --------------
#

add_library(bt_nodes SHARED
    "src/bt_nodes/action/arm.cpp"
    "src/bt_nodes/action/disarm.cpp"
    "src/bt_nodes/action/enable_hold.cpp"
    "src/bt_nodes/action/goto_vec.cpp"
    "src/bt_nodes/action/goto.cpp"
    "src/bt_nodes/action/land.cpp"
    "src/bt_nodes/action/mission.cpp"
    "src/bt_nodes/action/rtl.cpp"
    "src/bt_nodes/action/takeoff.cpp"
    "src/bt_nodes/sub/glob_pos.cpp"
)
# Link to auto_apms_px4 currently only needed for px4 topic sub node QoS workaround in bt_px4_topic_sub_node.hpp
target_link_libraries(bt_nodes auto_apms_px4)
ament_target_dependencies(bt_nodes
    auto_apms_behavior_tree
)
auto_apms_behavior_tree_register_nodes(bt_nodes
    "auto_apms_px4::ArmAction"
    "auto_apms_px4::DisarmAction"
    "auto_apms_px4::EnableHoldAction"
    "auto_apms_px4::GoToVectorAction"
    "auto_apms_px4::GoToAction"
    "auto_apms_px4::LandAction"
    "auto_apms_px4::MissionAction"
    "auto_apms_px4::RTLAction"
    "auto_apms_px4::TakeoffAction"
    "auto_apms_px4::ReadGlobalPosition"
)

#
# ------------ Packaging --------------
#

if(AUTO_APMS_PX4_DEBUG_LOGGING)
    target_compile_definitions(auto_apms_px4 PRIVATE _AUTO_APMS_PX4_DEBUG_LOGGING)
endif()

###### Export libraries ######
install(
    TARGETS
    auto_apms_px4
    EXPORT export_${PROJECT_NAME}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)
ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)
ament_export_dependencies(
    auto_apms_interfaces
    px4_msgs
    px4_ros2_cpp
    Eigen3
)

###### Non export libraries ######
install(
    TARGETS
    bt_nodes
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(
    DIRECTORY include/${PROJECT_NAME}
    DESTINATION include
)

install(
    DIRECTORY launch
    DESTINATION share/${PROJECT_NAME}
)

ament_package()
